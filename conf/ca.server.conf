# Server CA


# Define some variables that we want to use later, for example
# the URLs to use for the created (ie. signed) certificate.
[ default ]
ca                      = server                 # CA name
dir                     = .                      # Top dir
base_url                = http://pki.bieling.ws  # CA base URL
aia_url                 = $base_url/$ca.cer      # CA certificate URL
crl_url                 = $base_url/$ca.crl      # CRL distribution point
name_opt                = multiline,-esc_msb,utf8 # Display UTF-8 characters
orga_name               = $ENV::ORGA
keysize                 = $ENV::CA_KEYSIZE



# CA certificate request
# ----------------------

# This section controls the creation of the CA certificate request.
# We specify the key length and hash algorithm as well as where to
# find the "readable" information (country, organization, common
# name) and extension specification to be used for the certificate
# authority.
# Again, this information controls the creation of the certificate
# authority. It does not directly influence the signing of other
# certificate signing requests (CSR).
[ req ]
default_bits            = $keysize               # RSA key size
encrypt_key             = yes                    # Protect private key
default_md              = sha512                 # MD to use
utf8                    = yes                    # Input is UTF-8
string_mask             = utf8only               # Emit UTF-8 strings
prompt                  = no                     # Don't prompt for DN
distinguished_name      = ca_dn                  # DN section
req_extensions          = ca_reqext              # Desired extensions


# User-visible information about this CA. Note that together with the
# match_pol section we specify which values in the *user* certificate
# must match with those we gave here (in addition to those that must
# be supplied).
# The matching or supplied values can be chosen rather freely. For
# our case, we chose the "organisation" to be the family and require
# all certificates to match our CA in this regard.
[ ca_dn ]
countryName             = "DE"
organizationName        = $orga_name
organizationalUnitName  = $orga_name" Certificate Authority"
commonName              = $orga_name" Server CA"


# The extensions we request for this CA certificate. Note, the root CA,
# which shall sign this CA certificate, may modify these.
[ ca_reqext ]
keyUsage                = critical,keyCertSign,cRLSign
extendedKeyUsage        = critical,serverAuth
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash



# CA operational settings
# -----------------------

[ ca ]
default_ca              = server_ca              # The default CA section

[ server_ca ]
certificate             = $dir/ca/$ca.crt        # The CA cert
private_key             = $dir/ca/$ca/private/$ca.key # CA private key
new_certs_dir           = $dir/ca/$ca            # Certificate archive
serial                  = $dir/ca/$ca/db/$ca.crt.srl # Serial number file
crlnumber               = $dir/ca/$ca/db/$ca.crl.srl # CRL number file
database                = $dir/ca/$ca/db/$ca.db  # Index file
unique_subject          = no                     # Require unique subject
default_days            = 730                    # How long to certify for
default_md              = sha512                 # MD to use
policy                  = match_pol              # Default naming policy
email_in_dn             = no                     # Add email to cert DN
preserve                = no                     # Keep passed DN ordering
name_opt                = $name_opt              # Subject DN display options
cert_opt                = ca_default             # Certificate display options
copy_extensions         = copy                   # Copy extensions from CSR (does not overwrite CA-specified extensions)
x509_extensions         = server_ext             # Default cert extensions specified by CA
default_crl_days        = 190                    # How long before next CRL (old CRL becomes invalid)
crl_extensions          = crl_ext                # CRL extensions

# The "match" policy. In this policy section, we require the certificate
# request to match some values with information of the certificate authority.
[ match_pol ]
countryName             = match                  # Must match 'DE'
stateOrProvinceName     = optional               # Included if present
localityName            = optional               # Included if present
organizationName        = match                  # Must match 'bieling.ws'
organizationalUnitName  = optional               # Included if present
commonName              = supplied               # Must be present

# The "any" policy. In this policy, we pose no requirements on the
# certificate to be signed.
[ any_pol ]
domainComponent         = optional
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = optional
emailAddress            = optional



# Extensions

# List of extensions values our CA will enforce on any certificates
# to be signed. Since we "copy" the CSR-requested extensions (but do
# not overwrite those defined here), we must define basicConstraints,
# keyUsage and extendedKeyUsage. This way, the CSR cannot specify
# malicious values.
[ server_ext ]
keyUsage                = critical,digitalSignature,keyEncipherment
extendedKeyUsage        = critical,serverAuth
basicConstraints        = critical,CA:false
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @issuer_info
crlDistributionPoints   = @crl_info

[ crl_ext ]
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @issuer_info

[ issuer_info ]
caIssuers;URI.0         = $aia_url

[ crl_info ]
URI.0                   = $crl_url